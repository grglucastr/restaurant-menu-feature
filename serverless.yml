service:
  name: restaurant-menu-feature
# app and org for use with dashboard.serverless.com

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMODB_CATEGORIES_TABLE_NAME: Categories-${self:provider.stage}
    DYNAMODB_CATEGORIES_TABLE_INDEX: category-idx
    DYNAMODB_ITEMS_TABLE_NAME: Items-${self:provider.stage}
    DYNAMODB_ITEMS_TABLE_INDEX: items-idx
    DYNAMODB_BILLING_MODE: PAY_PER_REQUEST
    S3_BUCKET_IMAGES: bennun-imgs-restaurant-${self:provider.stage}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          method: get
          path: hello

resources:
  Resources:
    DynamoDBTableCategories:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_CATEGORIES_TABLE_NAME}
        BillingMode: ${self:provider.environment.DYNAMODB_BILLING_MODE}
        AttributeDefinitions:
          -
            AttributeName: restaurantId
            AttributeType: S
          -
            AttributeName: categoryId
            AttributeType: S
          - 
            AttributeName: createdAt
            AttributeType: S
        KeySchema:
          -
            AttributeName: restaurantId
            KeyType: HASH
          -
            AttributeName: createdAt
            KeyType: RANGE
        LocalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.DYNAMODB_CATEGORIES_TABLE_INDEX}
            Projection:
              ProjectionType: ALL
            KeySchema:        
            - 
              AttributeName: restaurantId
              KeyType: HASH
            -
              AttributeName: categoryId
              KeyType: RANGE

    DynamoDBTableItems:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_ITEMS_TABLE_NAME}
        BillingMode: ${self:provider.environment.DYNAMODB_BILLING_MODE}
        AttributeDefinitions:
          -
            AttributeName: categoryId
            AttributeType: S
          -
            AttributeName: itemId
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - 
            AttributeName: categoryId
            KeyType: HASH
          -
            AttributeName: createdAt
            KeyType: RANGE
        LocalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.DYNAMODB_ITEMS_TABLE_INDEX}
            Projection:
              ProjectionType: ALL
            KeySchema:
              - 
                AttributeName: categoryId
                KeyType: HASH

              - AttributeName: itemId
                KeyType: RANGE
  
    S3BucketImages:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_IMAGES}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - POST
                - GET
                - DELETE
                - HEAD
                - PUT
              MaxAge: 100

    S3BucketImagesPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3BucketImages
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            -
              Sid: PublicReadForGetObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_IMAGES}/*'